{
  "hash": "b280533c9b5e840a87c796de8f216ca2",
  "result": {
    "markdown": "---\ntitle: \"Clean Data\"\ndescription: \"Challenge from Shashank Kalanithi\"\nimage: clean.png\nimage-width: 80%\nimage-height: 30%\ndate: 2021-02-17\ncategories: \n  - Data Analysis \n  - Data Clean\ntags: \n  - R\n  - RStudio\npage: Blog\n---\n\n\nTransform messy data into clean data.\n\n![](clean.png)\n\n## Import data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrarian::shelf(fs, tidyverse, janitor, quiet = T)\nfs::dir_tree(\"../data\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n../data\n└── data_cleaning_challenge.csv\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndirty <- read_csv(\"../data/data_cleaning_challenge.csv\", show_col_types = F)\ndirty\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 76,377 × 11\n   `Row Type`       `Iter Number` Power1 Speed1 Speed2 Electricity Effort Weight\n   <chr>            <chr>         <chr>  <chr>  <chr>  <chr>       <chr>  <chr> \n 1 first name: Per… last name: H… date:… <NA>   <NA>   <NA>        <NA>   <NA>  \n 2 <NA>             <NA>          <NA>   <NA>   <NA>   <NA>        <NA>   <NA>  \n 3 Row Type         Iter Number   Power1 Speed1 Speed2 Electricity Effort Weight\n 4 Iter             1             360    108    863    599         680    442   \n 5 Iter             2             684    508    613    241         249    758   \n 6 Iter             3             365    126    825    407         855    164   \n 7 Iter             4             764    594    304    718         278    674   \n 8 Iter             5             487    97     593    206         779    800   \n 9 Average          182           361    741    231    731         493    847   \n10 Maximum          276           33     97     154    25          922    9     \n# ℹ 76,367 more rows\n# ℹ 3 more variables: Torque <chr>, ...10 <lgl>, ...11 <lgl>\n```\n:::\n:::\n\n\n## Clean data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndirty1 <- \n  dirty |> janitor::clean_names() |> # clean colnames \n  select(!c(x10, x11)) |>  # blank_column\n  mutate(\n    first_name  = case_when(str_detect(row_type, \"name\") ~ str_sub(row_type, 13, -1))\n    , last_name  = case_when(str_detect(iter_number, \"name\") ~ str_sub(iter_number, 12, -1))\n    , date  = case_when(str_detect(power1, \"date\") ~ str_sub(power1, 7, -1))\n    , iter  = case_when(str_detect(row_type, \"Total\") ~ row_number()\n  )) # Create newid\ndirty1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 76,377 × 13\n   row_type    iter_number power1 speed1 speed2 electricity effort weight torque\n   <chr>       <chr>       <chr>  <chr>  <chr>  <chr>       <chr>  <chr>  <chr> \n 1 first name… last name:… date:… <NA>   <NA>   <NA>        <NA>   <NA>   <NA>  \n 2 <NA>        <NA>        <NA>   <NA>   <NA>   <NA>        <NA>   <NA>   <NA>  \n 3 Row Type    Iter Number Power1 Speed1 Speed2 Electricity Effort Weight Torque\n 4 Iter        1           360    108    863    599         680    442    982   \n 5 Iter        2           684    508    613    241         249    758    639   \n 6 Iter        3           365    126    825    407         855    164    86    \n 7 Iter        4           764    594    304    718         278    674    774   \n 8 Iter        5           487    97     593    206         779    800    123   \n 9 Average     182         361    741    231    731         493    847    237   \n10 Maximum     276         33     97     154    25          922    9      312   \n# ℹ 76,367 more rows\n# ℹ 4 more variables: first_name <chr>, last_name <chr>, date <chr>, iter <int>\n```\n:::\n\n```{.r .cell-code}\ndirty2 <- dirty1 |> \n  fill(10:12) |> # fill column 10:12\n  fill(iter, .direction = 'up') |> # fill up\n  drop_na(speed1) |>  # delete rows with NA\n  with_groups(iter, ~mutate(., id = cur_group_id())) |> # create a unique id\n  select(!iter)\ndirty2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 52,403 × 13\n   row_type iter_number power1 speed1 speed2 electricity effort weight torque\n   <chr>    <chr>       <chr>  <chr>  <chr>  <chr>       <chr>  <chr>  <chr> \n 1 Row Type Iter Number Power1 Speed1 Speed2 Electricity Effort Weight Torque\n 2 Iter     1           360    108    863    599         680    442    982   \n 3 Iter     2           684    508    613    241         249    758    639   \n 4 Iter     3           365    126    825    407         855    164    86    \n 5 Iter     4           764    594    304    718         278    674    774   \n 6 Iter     5           487    97     593    206         779    800    123   \n 7 Average  182         361    741    231    731         493    847    237   \n 8 Maximum  276         33     97     154    25          922    9      312   \n 9 Std.Dev. 523         1000   34     904    237         600    170    553   \n10 Total    336         -      -      -      -           977    744    652   \n# ℹ 52,393 more rows\n# ℹ 4 more variables: first_name <chr>, last_name <chr>, date <chr>, id <int>\n```\n:::\n:::\n\n\n## Last touches and export\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_data <- \n  dirty2 |> \n  relocate(id, first_name, last_name, date) |> # relocate columns\n  mutate(across(iter_number:torque, as.numeric))  |> # convert into numeric (double)\n  rename_with(str_to_sentence) |> # Rename columns with str_tosenten\n  filter(!str_detect(Row_type, \"Avera|Maximimum|Std.|Total|Row Type\")) # delete aditional rows\nclean_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 28,427 × 13\n      Id First_name Last_name Date     Row_type Iter_number Power1 Speed1 Speed2\n   <int> <chr>      <chr>     <chr>    <chr>          <dbl>  <dbl>  <dbl>  <dbl>\n 1     1 Person     Human     end of … Iter               1    360    108    863\n 2     1 Person     Human     end of … Iter               2    684    508    613\n 3     1 Person     Human     end of … Iter               3    365    126    825\n 4     1 Person     Human     end of … Iter               4    764    594    304\n 5     1 Person     Human     end of … Iter               5    487     97    593\n 6     1 Person     Human     end of … Maximum          276     33     97    154\n 7     2 Person     Human     end of … Iter               1    702    494    311\n 8     2 Person     Human     end of … Iter               2    929     82    838\n 9     2 Person     Human     end of … Iter               3    763    402    344\n10     2 Person     Human     end of … Iter               4    469    930    560\n# ℹ 28,417 more rows\n# ℹ 4 more variables: Electricity <dbl>, Effort <dbl>, Weight <dbl>,\n#   Torque <dbl>\n```\n:::\n\n```{.r .cell-code}\nwrite.csv(clean_data, \"../data_out/01_clean_data.csv\", row.names = F)\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}