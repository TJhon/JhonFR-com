---
title: "Day 03" 
date: '2022-08-03'
image: day3.png
categories:
  - R
  - Data Viz 
  - sf
  - ggplot2
description: 'Day 3 form #30 Day Map Challenge'
---

# `PeruData` Covid datasets

To start, we load the necessary libraries using `librarian::shelf()`:

-   PeruData: Provides access to data related to Peru.
-   showtext: Enables text rendering in plots.
-   Tidyverse: Tidyverse universe

```{r}
knitr::opts_chunk$set(cache = T)
```

```{r}
librarian::shelf(
    PeruData
    , showtext
    , tidyverse
)
```

1.  Filtering the `covid_casos_fallecidos` dataset using various conditions to select the relevant data.
2.  Selecting specific columns using `select()` and renaming them using `rename()`.
3.  Grouping the data by `departamento` and `provincia` and calculating the sum of all columns using `with_groups()` and `mutate()`.
4.  Removing duplicate rows using `distinct()` and dropping any rows with missing values using `drop_na()`.
5.  Calculating the COVID lethality rate (`covid_leta`) by dividing `total_fallecidos` by `total_casos` and rounding the result.
6.  Renaming the columns to more meaningful names using `rename()`.

```{r}
letalida <-
    covid_casos_fallecidos |>
    filter(
        lubridate::year(fecha) > 2021
        , total_casos > 0
        ) |>
    filter(!(departamento %in% c("arica", "callao"))) |>
    select(departamento, provincia, total_casos, total_fallecidos) |>
    with_groups(
        c(departamento, provincia),
        ~mutate(., across(everything(), sum))
    ) |>
    distinct() |>
    drop_na() |>
    mutate(covid_leta = round((total_fallecidos/total_casos) * 100, 5)) |>
    rename(
        depa = 1
        , prov = 2
    )
```

After preparing the data

1.  Simplifying the geometry of the `map_peru_prov` dataset using `rmapshaper::ms_simplify()` to reduce complexity.
2.  Joining the simplified geometry dataset with the lethality data using `right_join()`.

```{r}
prov_covid <-
    map_peru_prov |>
    rmapshaper::ms_simplify(keep = .03) |>
    right_join(letalida) |>
    drop_na(geometry)
```

We proceed with creating the plot:

1.  Adding layers to the plot using `geom_sf()` to visualize the province-level COVID lethality.
2.  Adding a base map layer using `geom_sf()` to show the department boundaries.
3.  Customizing the theme to have a void background and adjusting various visual elements.
4.  Adding text labels to the plot using `geom_text()` to display department names.
5.  Setting plot titles, subtitles, and captions using `labs()`.
6.  Configuring the colorbar legend using `guides()` and `guide_colorbar()`.

```{r}

cl <- colorRampPalette(c("gray40", "#DF2808"))

ggplot()  +
    geom_sf(data = prov_covid, aes(fill = covid_leta, geometry = geometry), size = .1) +
    geom_sf(data = rmapshaper::ms_simplify(map_peru_depa, keep = .03), fill = NA, color = 'gray80', alpha = .2) +
    scale_fill_gradientn(colors = cl(3)) +
    theme_void() +
    # geom_text(
    #     data = map_peru_depa
    #     , aes(x_center, y_center, label = str_to_sentence(depa)
    #     )
    #     , color = "white"
    #     , size = 2.5
    # ) +
    labs(
        title = "Letalidad COVID (2022)"
        , subtitle = "Por provincias"
        , caption = "#30DayMapChallenge | Day 3: Polygons\nData: MMINSA | Created by @JhonKevinFlore1"
        , fill = "Letalidad (%)"
    ) +
    guides(
        fill = guide_colorbar(
            barheight = unit(1.5, units = "mm"),
            barwidth = unit(90, units = "mm"),
            direction = "horizontal",
            ticks.colour = "grey10",
            title.position = "top",
            title.hjust = 0.5)
        ) +
    theme(
        plot.background = element_rect(fill = "grey10", color = NA)
        , legend.position = c(.5, .05)
        , legend.title = element_text(color = "grey75")
        , legend.text = element_text(color = "grey75")
        , plot.title = element_text(color = "grey75")
        , plot.subtitle = element_text(color = "grey75")
        , plot.caption = element_text(color = "grey75")
    )
```

We save, and read again to see the result

```{r eval =F}
ggsave("day3.png", height = 8, width = 5, units = "in")
```

```{r}
knitr::include_graphics("day3.png")
```
